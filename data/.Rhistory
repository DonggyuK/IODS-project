biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab="PC1", ylab="PC2")
us<-summary(human)
pca_pr_us<-round(1*us$importance[2,], digits=1)
pca_pr_us<-round(1*us$importance[2,], digits=1)
us<-summary(human)
pca_pr_us<-round(1*us$importance[2,], digits=1)
pca_pr_us<-round(1*us$importance[2,], digits=1)
biplot(pca_human_unstd, cex=c(0.8,1), col=c("grey40","deeppink2"), xlab="PC1", ylab="PC2")
#the standized variables
human_std<-scale(human)
#print out summaries of human_std
summary(human_std)
#print out summaries of human_std
summary(human_std)
#perform principal component analysis(with the SVD method)
pca_human<-prcomp(human_std)
pca_human
##draw a biplot of the principan component representation and the original variables
s<-summary(pca_human)
#rounded percentages of variance captured by each PC
pca_pr<-round(1*s$importance[2,], digits=1)
#print out the percentages of variance
pca_pr
#create object pc_lab to be used as axis labels
paste0(names(pca_pr, "(", pca_pr, "%)")
#draw a biplot
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab="PC1", ylab="PC2")
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab="PC1", ylab="PC2")
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab=pc_lab[1], ylab=pc_lab[2])
#create object pc_lab to be used as axis labels
pc_lab<-paste0(names(pca_pr, "(", pca_pr, "%)")
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab=pc_lab[1], ylab=pc_lab[2])
#create object pc_lab to be used as axis labels
pc_lab<-paste0(names(pca_pr), "(", pca_pr, "%)")
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab=pc_lab[1], ylab=pc_lab[2])
pca_pr_us<-round(1*us$importance[2,], digits=1)
##Try to find out the most essential variabls through dimentionality reduction with PCA.
#the unstandardized variables
pca_human_unstd<-prcomp(human)
us<-summary(human)
biplot(pca_human_unstd, cex=c(0.8,1), col=c("grey40","deeppink2"), xlab="PC1", ylab="PC2")
#the standized variables
human_std<-scale(human)
#print out summaries of human_std
summary(human_std)
#perform principal component analysis(with the SVD method)
pca_human<-prcomp(human_std)
pca_human
##draw a biplot of the principan component representation and the original variables
s<-summary(pca_human)
#rounded percentages of variance captured by each PC
pca_pr<-round(1*s$importance[2,], digits=1)
#print out the percentages of variance
pca_pr
#create object pc_lab to be used as axis labels
pc_lab<-paste0(names(pca_pr), "(", pca_pr, "%)")
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab=pc_lab[1], ylab=pc_lab[2])
##Multiple Correspondence Analysis with Tea dataset
library
##Multiple Correspondence Analysis with Tea dataset
library
install.packages("Factominer")
install.packages("FactoMineR")
library(FactoMineR)
##Multiple Correspondence Analysis with Tea dataset
Library(FactMineR)
Library(FactMineR)
Library(FactoMineR)
Library(FactoMineR)
##Multiple Correspondence Analysis with Tea dataset
library(tea)
##Multiple Correspondence Analysis with Tea dataset
library(tea)
library(tea)
library(FactoMineR)
##Multiple Correspondence Analysis with Tea dataset
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
#keep column names in the dataset
keep_columns<-c("Tea", "How","how","sugar","where","lunch")
#select the 'keep_columns' to create a new dataset
tea_time<-select(tea, one_of(keep_columns))
library("tea")
read("tea")
data("tea")
#keep column names in the dataset
keep_columns<-c("Tea", "How","how","sugar","where","lunch")
#select the 'keep_columns' to create a new dataset
tea_time<-select(tea, one_of(keep_columns))
#visualize the dataset
gather(tea_time)%>%ggplot(ase(value))+facet_wrap("key",scales="free")
#visualize the dataset
gather(tea_time)%>%ggplot(aes(value))+facet_wrap("key",scales="free")
#visualize the dataset
gather(tea_time)%>%ggplot(aes(value))+facet_wrap("key",scales="free")+geom_bar()
#summaries and structure of the data
summary(tea_time)
str(tea_time)
#visualize the dataset
gather(tea_time)%>%ggplot(aes(value))+facet_wrap("key",scales="free")+geom_bar()
#Multiple Corresondence Analysis
mca<-MCA(tea_time, graph=FALSE)
#summary of the model
summary(mca)
#visualize MCA
plot(mca, invisible=c("ind"))
#visualize MCA
plot(mca, invisible=c("ind"), habillage="quali")
data("BPRS")
data(BPRS)
data("BPRS")
BPRS<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep="", header=TRUE)
RATS<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", sep="Ã†T", header=T)
RATS<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", sep="\T", header=T)
RATS<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", sep="\", header=T)
")
RATS<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", sep="\t", header=T)
")
library(dplyr)
")
library(dplyr)
library(tidyr)
")
library(dplyr)
library(tidyr)
")
library(dplyr)
library(tidyr)
")
library(dplyr)
library(tidyr)
")
library(dplyr)
library(tidyr)
")
library(dplyr)
library(tidyr)
")
library(dplyr)
library(tidyr)
")
library(dplyr)
library(tidyr)
")
library(dplyr)
library(tidyr)
library(dplyr)
library(tidyr)
# Factor treatment & subject
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
# Factor treatment & subject
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
treatment
BPRS$treatment
BPRS<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep="", header=TRUE)
str(BPRS)
summary(BPRS)
str(RATS)
summary(RATS)
# Extract the week number
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr("week", 1,5)))
library(dplyr)
library(tidyr)
library(tidyr)
library(dplyr)
# Factor treatment & subject
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
# Convert to long form
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
# Extract the week number
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr("week", 1,5)))
# Extract the week number
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(wekks, 5,5)))
# Extract the week number
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks, 5,5)))
# Take a glimpse at the BPRSL data
glimpse(BPRSL)
#graphical displays of individuals
library(ggplot2)
+scale_y_continuous(limits = c(min(BPRS$bprs), max(BPRS$bprs)), name=("BPRS"))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))
+scale_linetype_manual(values=rep(1:10, times=4))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
them(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRS$bprs), max(BPRS$bprs)), name=("BPRS"))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
theme(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRS$bprs), max(BPRS$bprs)), name=("BPRS"))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
theme(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRS$bprs), max(BPRS$bprs)), name=("BPRS"))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
theme(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRS$bprs), max(BPRS$bprs)), name=("BPRS"))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
theme(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRS$bprs), max(BPRS$bprs)), name=("BPRS"))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
theme(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRS$BPRS), max(BPRS$BPRS)), name=("BPRS"))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
theme(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRS$bprs), max(BPRS$bprs)), name=("BPRS"))
str(RATS)
#explore data
str(BPRS)
# Factor treatment & subject
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
# Convert to long form
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
# Extract the week number
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks, 5,5)))
# Take a glimpse at the BPRSL data
glimpse(BPRSL)
#graphical displays of individuals
library(ggplot2)
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
theme(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRS$bprs), max(BPRS$bprs)), name=("BPRS"))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
theme(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)), name=("BPRS"))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
theme(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)), name=("BPRS"))
#draw the plot
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
geom_line()+
scale_linetype_manual(values=rep(1:10, times=4))+
facet_grid(.~treatment, labeller = label_both)+
theme(legend.position = "top")+
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)), name=("BPRS"))
#standardise the variable bprs
BPRSL<- BPRSL%>%
group_by(week)%>%
mutate(stdbprs = ((bprs-mean(bprs))/sd(bprs))) %>%
ungroup()
#glimps at the data
glimpse(BPRSL)
#plot again with the standardized bprs
ggplot(BPRSL, aes(x=week, y=bprs, linetype=subject))+
geom_line()+
scale_linetype_manual(values=rep(1:10, time = 4))+
facet_grid(.~treatment, labeller = label_both)+
scale_y_continuous(name = "standardized bprs")
#summary graphs
#Number of weeks, baseline (week 0) included
n <- BPRSL%>%unique()%>% length()
#summary data with and standard error of bprs by treatment and week
BPRSS<-BPRSL%>%
group_by(treatment, week)%>%
summarise( mean = (bprs), se =sd(bprs)/sqrt(n))%>%
ungroup()
#summary data with and standard error of bprs by treatment and week
BPRSS<-BPRSL%>%
group_by(treatment, week)%>%
summarise( mean = (bprs), se =sd(bprs)/sqrt(n))%>%
ungroup()
#summary graphs
#Number of weeks, baseline (week 0) included
n <- BPRSL%>%unique()%>% length()
#summary data with and standard error of bprs by treatment and week
BPRSS<-BPRSL%>%
group_by(treatment, week)%>%
summarise( mean = (bprs), se =sd(bprs)/sqrt(n))%>%
ungroup()
#summary data with and standard error of bprs by treatment and week
BPRSS<-BPRSL%>%
group_by(treatment, week)%>%
summarise( mean = mean(bprs), se =sd(bprs)/sqrt(n))%>%
ungroup()
#glimpse at the data
glimpse(BPRSS)
#plot the mean profiles
ggplot(BPRSS, aes(x=week, y=mean, linetype=treatment, shape=treatment))+
geom_line()+
scale_linetype_manual(values=c(1,2))+
geom_point(size=3)+
scale_shape_manual(values=c(1,2))+
geom_errorbar(aes(ymin=mean-se), ymax=mean+se, linetype="1"), width=0.3)+
scale_y_continuous(name= "mean(bprs)+/- se(bprs)")
#plot the mean profiles
ggplot(BPRSS, aes(x=week, y=mean, linetype=treatment, shape=treatment))+
geom_line()+
scale_linetype_manual(values=c(1,2))+
geom_point(size=3)+
scale_shape_manual(values=c(1,2))+
geom_errorbar(aes(ymin=mean-se), ymax=mean+se, linetype="1"), width=0.3)+
scale_y_continuous(name= "mean(bprs)+/- se(bprs)")
#plot the mean profiles
ggplot(BPRSS, aes(x=week, y=mean, linetype=treatment, shape=treatment))+
geom_line()+
scale_linetype_manual(values=c(1,2))+
geom_point(size=3)+
scale_shape_manual(values=c(1,2))+
geom_errorbar(aes(ymin=mean-se), ymax=mean+se, linetype="1"), width=0.3)+
scale_y_continuous(name= "mean(bprs)+/- se(bprs)")
#plot the mean profiles
ggplot(BPRSS, aes(x=week, y=mean, linetype=treatment, shape=treatment))+
geom_line()+
scale_linetype_manual(values= c(1,2) )+
geom_point(size=3)+
scale_shape_manual(values=c(1,2))+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se, linetype="1"), width=0.3)+
scale_y_continuous(name= "mean(bprs)+/- se(bprs)")
#Find outliers
#create a summary data by treatment and subject with mean as the summary variable
BPRSL8S<-BPRSL%>%
filter(week >0 )%>%
group_by(treatment, subject)%>%
summarise(mean = mean(bprs))%>%
ungroup
#glipse at the data
glimpse(BPRSL8S)
#draw a boxplot of the mean versus treatment
ggplot(BPRSL8S, aes(x = treatment, y= mean))+
geom_boxplot()+
stat_summary(fun.y="mean", geom="point", shape=23, size =4, fill= "white")+
scale_y_continuous(name="mean(bprs), weeks 1-8")
#create a new data by filtering th outlier
BPRSL8S1<-BPRSL8S%>%
filter(mean<60)
ggplot(BPRSL8S1,aes(x = treatment, y= mean))+
geom_boxplot()+
stat_summary(fun.y="mean", geom="point", shape=23, size =4, fill= "white")+
scale_y_continuous(name="mean(bprs), weeks 1-8"))
#re-plot with the new data
ggplot(BPRSL8S1,aes(x = treatment, y= mean))+
geom_boxplot()+
stat_summary(fun.y="mean", geom="point", shape=23, size =4, fill= "white")+
scale_y_continuous(name="mean(bprs), weeks 1-8")
#T-test and Anova analysis
#perform a two-sample t-test
t.test(mean~treatment, data = BPRSL8S1, var.equal =TRUE)
#add the baseline from the original data as a new variable to the summary data
BPRSL8S2<-BPRSL8S%>%
mutate(baseline=BPRS$week0)
#fit the linear model with the mean as the response
fit <-lm(mean~baseline+treatment, data=BPRSL8S1)
#fit the linear model with the mean as the response
fit <-lm(mean~BPRSL8S2$baseline+treatment, data=BPRSL8S2)
#fit the linear model with the mean as the response
fit <-lm(mean~baseline+treatment, data=BPRSL8S2)
BPRSL8S2
#anova
anova(fit)
##RATS
#creating factors with ID and Group
glimpse(RATS)
RATS$ID<-factor(RATS$ID)
##RATS
#creating factors with ID and Group
glimpse(RATS)
RATS$Group<-factor(RAST$Group)
RATS$Group<-factor(RATS$Group)
glimpse(RATS)
#linear mixed effects model
#convert data to long form
RATSL<-RATS%>%
gather(key=WD, value=Weight, -ID, -Grou)%>%
mutate(Time=as.integer(substr(WD, 64)))
#linear mixed effects model
#convert data to long form
RATSL<-RATS%>%
gather(key=WD, value=Weight, -ID, -Groud)%>%
mutate(Time=as.integer(substr(WD, 64)))
#linear mixed effects model
#convert data to long form
RATSL<-RATS%>%
gather(key=WD, value=Weight, -ID, -Group)%>%
mutate(Time=as.integer(substr(WD, 64)))
#linear mixed effects model
#convert data to long form
RATSL<-RATS%>%
gather(key=WD, value=Weight, -ID, -Group)%>%
mutate(Time=as.integer(substr(WD,,64)))
#linear mixed effects model
#convert data to long form
RATSL<-RATS%>%
gather(key=WD, value=Weight, -ID, -Group)%>%
mutate(Time=as.integer(substr(WD,1,64)))
#linear mixed effects model
#convert data to long form
RATSL<-RATS%>%
gather(key=WD, value=Weight, -ID, -Group)%>%
mutate(Time=as.integer(substr(WD,1,64)))
View(RATSL)
View(RATSL)
#linear mixed effects model
#convert data to long form
RATSL<-RATS%>%
gather(key=WD, value=Weight, -ID, -Group)%>%
mutate(Time=as.integer(substr(WD,3,4)))
View(RATSL)
View(BPRS)
View(BPRS)
View(RATSL)
View(RATS)
View(RATS)
View(RATS)
View(RATSL)
glimpse(RATSL)
#plot the RATSL data
dim(RATSL)
#plot the RATSL data
ggplot(RATSL, aes(x= Time, y= Weight, group = ID, linetype=Group))+
geom_line()+
scale_x_continuous(name="Time(days)", breaks = seq(0, 60, 10))+
scale_y_continuous(name=("Weight(grams)"))+
theme(legend.position = "top")
#Linear model
RATS_reg<-lm(Weight~Time + Group, data= RATSL)
summary(RATS_reg)
plot(RATS_reg)
#Randome intercept model(lme4)
library(lme4)
#create a random intercept model
RATSL_ref<-lmer(Weight~Time + Group + (1|ID), data = RATSL, REML = TRUE)
summary(RATSL_ref)
#create a random intercept and random slope model
RATS_ref1<-lmer(Weight~Time + Group + (Time|ID), data = RATSL, REML = FALSE)
summary(RATS_ref1)
avnova(RATS_ref1, RATS_ref)
anova(RATS_ref1, RATS_ref)
#create a random intercept model
RATSL_ref<-lmer(Weight~Time + Group + (1|ID), data = RATSL, REML = TRUE)
#create a random intercept and random slope model
RATS_ref1<-lmer(Weight~Time + Group + (Time|ID), data = RATSL, REML = FALSE)
anova(RATS_ref1, RATS_ref)
anova(RATS_ref1, RATS_ref)
#create a random intercept model
RATS_ref<-lmer(Weight~Time + Group + (1|ID), data = RATSL, REML = TRUE)
#create a random intercept and random slope model
RATS_ref1<-lmer(Weight~Time + Group + (Time|ID), data = RATSL, REML = FALSE)
anova(RATS_ref1, RATS_ref)
#interaction between TIme and Group
RATS_ref2<-lmer(Weight~Time*Group+(Time|ID), data=RATSL, REML=FALSE)
summary(RATS_ref2)
anova(RATS_ref2, RATS_ref1)
#draw the plot of RATSL with the observed Weigth values
ggplot(RATSL, aes(x=Time, y= Weight, group=ID))+
geom_line(aes(linetype=Group))+
scale_x_continuous(name="Time(days)", breaks=seq(0,60,10))+
scale_y_continuous(name="Observed Weight(grams)")+
them(legend.position="top")
#draw the plot of RATSL with the observed Weigth values
ggplot(RATSL, aes(x=Time, y= Weight, group=ID))+
geom_line(aes(linetype=Group))+
scale_x_continuous(name="Time(days)", breaks=seq(0,60,10))+
scale_y_continuous(name="Observed Weight(grams)")+
them(legend.position="top")
#draw the plot of RATSL with the observed Weigth values
ggplot(RATSL, aes(x=Time, y= Weight, group=ID))+
geom_line(aes(linetype=Group))+
scale_x_continuous(name="Time(days)", breaks=seq(0,60,10))+
scale_y_continuous(name="Observed Weight(grams)")+
theme(legend.position="top")
#creat a vector of the fitted values
Fitted<-RATS_ref2
#create a new column fitted RATSL
RATSL$Fitted<-RATS_ref2
#creat a vector of the fitted values
Fitted<-fitted(RATS_ref2)
#create a new column fitted RATSL
RATSL<-RASTL%>%
mutate(Fitted)
#create a new column fitted RATSL
RATSL<-RATSL%>%
mutate(Fitted)
#draw the plot of RATSL
ggplot(RATSL, aes(x = Time, y=Fitted, group=ID))+
geom_line(aes(linetype = Group))+
scale_x_continuous(name ="Time(days)", breaks = seq(0, 60, 20))+
scale_y_continuous(name ="Fitted weight (grams)")+
theme(legend.position = "top")
