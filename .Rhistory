# read the human data
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
# look at the (column) names of human
names(human)
# look at the structure of human
str(human)
# print out summaries of the variables
summary(human)
#tidyr package and human are available
library(tidyr)
install.packages("tidyr")
#tidyr package and human are available
library(tidyr)
install.packages(c("cluster", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"))
#tidyr package and human are available
library(tidyr)
#access the stringr package
library(stringr)
install.packages("stringr")
#access the stringr package
library(stringr)
#look at the structure of the GNI column in 'human'
str(human$GNI)
install.packages("devtools")
library(devtools)
#access the stringr package
library(stringr)
install.packes("stringr")
#tidyr package and human are available
library(tidyr)
install.packages("tidyr")
#tidyr package and human are available
library(tidyr)
#access the stringr package
library(stringr)
install.package("stringr")
install.packages("stringr")
#tidyr package and human are available
library(tidyr)
#access the stringr package
library(stringr)
#look at the structure of the GNI column in 'human'
str(human$GNI)
#Remove the commnas from GNI and print out a numeric version of it
str_replace(human$GNI, pattern=",", replace="")%>%as. numeric
#Remove the commnas from GNI and print out a numeric version of it
str_replace(human$GNI, pattern=",", replace="")%>%as.numeric
##dealing with not available values (NA)
#column to keep
keep<-c("Country","Edu2.FM","Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor","Ado.Birth","Parli.F")
#select the 'keep' columns
human<-select(human, one-of(keep))
library(dplyr)
#select the 'keep' columns
human<-select(human, one-of(keep))
#select the 'keep' columns
human<-select(human, one_of(keep))
#print out a completeness indicator of the 'human' data
complete.cases(human)
#print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp=complete.cases(human))
#filter out all rows with NA values
human<-filter(human, complete.cases(human))
human_
#filter out all rows with NA values
human_<-filter(human, complete.cases(human))
human_
##exclude observations
#look at the last 10 obs. of human
tail(human, 10)
#define the last indice we want to keep
last<-nrow(human)-7
las
last
#choose everthing until the last 7 obs.
human_<-human[1:last,]
#add countries as rownames
rownames(human_)<-human_$Country
human_
##explore thec countries
#remove the Country variable
human_<-select(human, -Country)
library(GGally)
install.packages("GGally")
library(GGally)
#visulalize the 'human_' variables
ggpairs(human_)
#visulalize the 'human_' variables
ggpairs(human_)
##explore thec countries
#remove the Country variable
human_<-select(human, -Country)
##dealing with not available values (NA)
#column to keep
keep<-c("Country","Edu2.FM","Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor","Ado.Birth","Parli.F")
#select the 'keep' columns
human<-select(human, one_of(keep))
#print out a completeness indicator of the 'human' data
complete.cases(human)
#print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp=complete.cases(human))
#filter out all rows with NA values
human_<-filter(human, complete.cases(human))
human_
##exclude observations
#look at the last 10 obs. of human
tail(human, 10)
#define the last indice we want to keep
last<-nrow(human)-7
last
#choose everthing until the last 7 obs.
human_<-human[1:last,]
##explore thec countries
#remove the Country variable
human_<-select(human, -Country)
#add countries as rownames
rownames(human_)<-human_$Country
##explore thec countries
#remove the Country variable
human_<-select(human, -Country)
#visulalize the 'human_' variables
ggpairs(human_)
#tidyr package and human are available
library(tidyr)
#access the stringr package
library(stringr)
#look at the structure of the GNI column in 'human'
str(human$GNI)
#Remove the commnas from GNI and print out a numeric version of it
str_replace(human$GNI, pattern=",", replace="")%>%as.numeric
library(dplyr)
##dealing with not available values (NA)
#column to keep
keep<-c("Country","Edu2.FM","Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor","Ado.Birth","Parli.F")
#select the 'keep' columns
human<-select(human, one_of(keep))
#print out a completeness indicator of the 'human' data
complete.cases(human)
#print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp=complete.cases(human))
#filter out all rows with NA values
human_<-filter(human, complete.cases(human))
human_
##exclude observations
#look at the last 10 obs. of human
tail(human, 10)
#define the last indice we want to keep
last<-nrow(human)-7
last
#choose everthing until the last 7 obs.
human_<-human[1:last,]
#visulalize the 'human_' variables
ggpairs(human_)
cor(human_)
cor(human)
#visulalize the 'human_' variables
ggpairs(human)
human<-read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human2.txt", sep=',', header= TRUE)
##overview and summary of the data
ggpairs(human)
summary(human)
mean(human$Life.Exp)
##Try to find out the most essential variabls through dimentionality reduction with PCA.
#standardize the variables
human_std<-scale(human)
#print out summaries of human_std
summary(human_std)
#perform principal component analysis(with the SVD method)
pca_human<-prcomp(human_std)
pca_human
#draw a biplot of the principan component representation and the original variables
biplot(pca_human, choices=1:2)
#draw a biplot of the principan component representation and the original variables
biplot(pca_human, choices=1:2, cex=c(0.8,1))
#draw a biplot of the principan component representation and the original variables
biplot(pca_human, choices=1:2, cex=c(0.8,1), col=c("grey40","deeppink2"))
##Try to find out the most essential variabls through dimentionality reduction with PCA.
#with the unstandardized variables
pca_human_unstd<-prcomp(human)
#draw a biplot of the principan component representation and the original variables
par(mfrow=c(2,2))
biplot(pca_human_unstd, choiches=1:2, cex=c(o.8,1), col=c("grey40", "deeppinki2"))
biplot(pca_human_unstd, choiches=1:2, cex=c(0.8,1), col=c("grey40", "deeppinki2"))
biplot(pca_human, choices=1:2, cex=c(0.8,1), col=c("grey40","deeppink2"))
##Tea dataset
libraru(Factominer)
##draw a biplot of the principan component representation and the original variables
par(mfrow=c(1,1))
biplot(pca_human_unstd, choiches=1:2, cex=c(0.8,1), col=c("grey40", "deeppinki2"))
##draw a biplot of the principan component representation and the original variables
s<-summary(pca_human)
##draw a biplot of the principan component representation and the original variables
s<-summary(pca_human)
#rounded percentages of variance captured by each PC
pca_pr<-round(1*s$importance[2,], digits=5)
#print out the percentages of variance
pca_pr<-round(1*s$importance[2,], digits =1)
#rounded percentages of variance captured by each PC
pca_pr<-round(1*s$importance[2,], digits=1)
#print out the percentages of variance
pca_pr
#create object pc_lab to be used as axis labels
paste0(names(pca_pr, "(", pca_pr, "%)")
#draw a biplot
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab=PC1, ylab=PC2)
#draw a biplot
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab=PC1, ylab=PC2)
#create object pc_lab to be used as axis labels
paste0(names(pca_pr, "(", pca_pr, "%)")
#create object pc_lab to be used as axis labels
paste0(names(pca_pr, "(", pca_pr, "%)"))
#create object pc_lab to be used as axis labels
paste0(names(pca_pr, "(", pca_pr, "%)")
#draw a biplot
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab="PC1", ylab="PC2")
Unstandaized variables looks out of ranges because PCA is sensitive to the relatives scallings of the orginal variables and assumes that feature with larger varianace are more important than variables with smaller variabnce.
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab="PC1", ylab="PC2")
us<-summary(human)
pca_pr_us<-round(1*us$importance[2,], digits=1)
pca_pr_us<-round(1*us$importance[2,], digits=1)
us<-summary(human)
pca_pr_us<-round(1*us$importance[2,], digits=1)
pca_pr_us<-round(1*us$importance[2,], digits=1)
biplot(pca_human_unstd, cex=c(0.8,1), col=c("grey40","deeppink2"), xlab="PC1", ylab="PC2")
#the standized variables
human_std<-scale(human)
#print out summaries of human_std
summary(human_std)
#print out summaries of human_std
summary(human_std)
#perform principal component analysis(with the SVD method)
pca_human<-prcomp(human_std)
pca_human
##draw a biplot of the principan component representation and the original variables
s<-summary(pca_human)
#rounded percentages of variance captured by each PC
pca_pr<-round(1*s$importance[2,], digits=1)
#print out the percentages of variance
pca_pr
#create object pc_lab to be used as axis labels
paste0(names(pca_pr, "(", pca_pr, "%)")
#draw a biplot
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab="PC1", ylab="PC2")
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab="PC1", ylab="PC2")
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab=pc_lab[1], ylab=pc_lab[2])
#create object pc_lab to be used as axis labels
pc_lab<-paste0(names(pca_pr, "(", pca_pr, "%)")
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab=pc_lab[1], ylab=pc_lab[2])
#create object pc_lab to be used as axis labels
pc_lab<-paste0(names(pca_pr), "(", pca_pr, "%)")
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab=pc_lab[1], ylab=pc_lab[2])
pca_pr_us<-round(1*us$importance[2,], digits=1)
##Try to find out the most essential variabls through dimentionality reduction with PCA.
#the unstandardized variables
pca_human_unstd<-prcomp(human)
us<-summary(human)
biplot(pca_human_unstd, cex=c(0.8,1), col=c("grey40","deeppink2"), xlab="PC1", ylab="PC2")
#the standized variables
human_std<-scale(human)
#print out summaries of human_std
summary(human_std)
#perform principal component analysis(with the SVD method)
pca_human<-prcomp(human_std)
pca_human
##draw a biplot of the principan component representation and the original variables
s<-summary(pca_human)
#rounded percentages of variance captured by each PC
pca_pr<-round(1*s$importance[2,], digits=1)
#print out the percentages of variance
pca_pr
#create object pc_lab to be used as axis labels
pc_lab<-paste0(names(pca_pr), "(", pca_pr, "%)")
biplot(pca_human, cex=c(0.8,1), col=c("grey40", "deeppink2"), xlab=pc_lab[1], ylab=pc_lab[2])
##Multiple Correspondence Analysis with Tea dataset
library
##Multiple Correspondence Analysis with Tea dataset
library
install.packages("Factominer")
install.packages("FactoMineR")
library(FactoMineR)
##Multiple Correspondence Analysis with Tea dataset
Library(FactMineR)
Library(FactMineR)
Library(FactoMineR)
Library(FactoMineR)
##Multiple Correspondence Analysis with Tea dataset
library(tea)
##Multiple Correspondence Analysis with Tea dataset
library(tea)
library(tea)
library(FactoMineR)
##Multiple Correspondence Analysis with Tea dataset
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
#keep column names in the dataset
keep_columns<-c("Tea", "How","how","sugar","where","lunch")
#select the 'keep_columns' to create a new dataset
tea_time<-select(tea, one_of(keep_columns))
library("tea")
read("tea")
data("tea")
#keep column names in the dataset
keep_columns<-c("Tea", "How","how","sugar","where","lunch")
#select the 'keep_columns' to create a new dataset
tea_time<-select(tea, one_of(keep_columns))
#visualize the dataset
gather(tea_time)%>%ggplot(ase(value))+facet_wrap("key",scales="free")
#visualize the dataset
gather(tea_time)%>%ggplot(aes(value))+facet_wrap("key",scales="free")
#visualize the dataset
gather(tea_time)%>%ggplot(aes(value))+facet_wrap("key",scales="free")+geom_bar()
#summaries and structure of the data
summary(tea_time)
str(tea_time)
#visualize the dataset
gather(tea_time)%>%ggplot(aes(value))+facet_wrap("key",scales="free")+geom_bar()
#Multiple Corresondence Analysis
mca<-MCA(tea_time, graph=FALSE)
#summary of the model
summary(mca)
#visualize MCA
plot(mca, invisible=c("ind"))
#visualize MCA
plot(mca, invisible=c("ind"), habillage="quali")
